#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <chrono>

using namespace std;

typedef std::chrono::high_resolution_clock Clock;

vector<vector<float> > DTW(vector<vector<float> >& mtreino,vector<vector<float> >&mteste);    							//Função dtw, usa duas series de tempo para determinar o quão semelhantes são

float acertividade(vector<vector<float> > mrotulos, vector<int> respostas );										//Com os resultados de distâncias fornecidos pela dtw, esta função irá classificar as séries temporais em categorias específicas

double Calc_Dist(float x, float y);																						//Função de calculo de distância entre dois valores

vector<int> KNN(vector<vector<float> > resultados ,vector<vector<float> > comparado,vector<vector<float> > treino,int k);

int main(){

	ifstream file("treinoPA.txt");																						//Arquivo contendo o centúdo de treino, séries já classificadas utilizadas para comparar com as séries de entrada(teste)
	
	int coluna = 0;																										//Contador de colunas
	int linha = 0;																										//Contador de linhas
	float vet;
  	char k;																												
	string cvet;																										//Estrutura de string que receberá a leitura dos arquivos de texto
	string::size_type sz = 0;		

	vector <float> linhas;
	vector<vector<float> > matriz_treino;																				//Estrutura de vetor criada para armazenar os valores recuperados dos arquivos
	
	if(file)
	{
		while(getline(file,cvet))   																					//função para obter uma linha em formato string
		{
			vector<float> aux;																							//vetor aux para salvar linhas inteiras e passar para a matriz
			for(int i = 0; i < cvet.size();i++) 																		// for que percorrerá todos os elementos da linha(char) para ler e separar os valores armazenados
			{
					if(i == 0) 																							//caso seja o primeiro elemento o valor de classificação é salvo nas primeiras colunas da matriz_treino
					{
						sz = i;														
						vet = stof(cvet.substr(sz));
						aux.push_back(vet);																				//O elemento é adicionado para o vetor
					}
					if(cvet.at(i) == ' ')   																			//Identifica o próximo elemento a partir daa separação pelo caractere espaço
					{
							sz = i;
							coluna++;																					//incrementa o contador de colunas para registar o novo elemento
							vet = stof(cvet.substr(sz));																//converte o valor recebido de string para float
							aux.push_back(vet);																			//salva o valor lido no valor auxiliar
					}
			}
			matriz_treino.push_back(aux);																				//Adiciona o vetor de float criado na matriz
			aux.erase(aux.begin(),aux.end());																			//O vetor aux é limpo para liberar o espaço na memória
			linha++;																									//fim de um ciclo => fim da linha
			coluna = 0;																									//começa-se uma nova linha e a coluna vai à zero
		}
	}
	/*
		tem-se a matriz_treino de treinos
		pegar matriz de teste
	*/
	
	ifstream file2("teste.txt");

	coluna = 0;																											//contador de colunas
	linha = 0;																											//contador de linhas

	vector<vector<float> > matriz_teste;																				//Estrutura de vetor criada para armazenar os valores recuperados dos arquivos
	if(file2)
	{
		while(getline(file2,cvet))   																					//função para obter uma linha em formato string
		{
			vector<float> aux;																							//vetor aux para salvar linhas inteiras e passar para a matriz
			for(int i = 0; i < cvet.size();i++) 																		// for que percorrerá todos os elementos da linha(char) para ler e separar os valores armazenados
			{
					if(i == 0) 																							//caso seja o primeiro elemento o valor de classificação é salvo nas primeiras colunas da matriz
					{
						sz = i;
						vet = stof(cvet.substr(sz));
						aux.push_back(vet);																				//O elemento é adicionado no vetor
					}
					if(cvet.at(i) == ' ')   																			//Identifica o próximo elemento a partir daa separação pelo caractere espaço
					{
							sz = i;
							coluna++;																					//incrementa o contador de colunas para registar o novo elemento
							vet = stof(cvet.substr(sz));																//converte o valor recebido de string para float
							aux.push_back(vet);																			//salva o valor lido no valor auxiliar
					}
			}
			matriz_teste.push_back(aux);																				//Adiciona o vetor de float criado na matriz
			aux.erase(aux.begin(),aux.end());																			//O vetor aux é limpo para liberar o espaço na memória
			linha++;																									//fim de um ciclo => fim da linha
			coluna = 0;																									//começa-se uma nova linha e a coluna vai à zero
		}
	}

	vector<vector<float> > distancia(matriz_treino.size());																//matriz que recebe as distancias retornadas pelo DTW														

	for(int k; k < matriz_treino.size();k++)
 	{
	 	distancia[k].resize(matriz_teste.size());				
 	}
	
	auto Tdtw1 = Clock::now();
 	distancia = DTW(matriz_treino,matriz_teste);																		//Chama a função DTW para calcular os valores de distância entre os arquivos texte e treino																		
 	auto Tdtw2 = Clock::now();
	cout<<"Tempo Rotinas DTW:"<<chrono::duration_cast<chrono::nanoseconds>(Tdtw2 - Tdtw1).count()/1000000000.0<<endl;
 	vector<vector<float> > copia_dist;																					//cria uma copia dos valores de distancia para guardar as posições originais dos valores
 	copia_dist = distancia;
 	
 	
 	auto Tsort1 = Clock::now();
 	for(int l = 0; l < distancia.size();l++)
 	{
 		sort(distancia[l].begin(),distancia[l].begin() + distancia[l].size());											//Organiza os vetores em ordem crescente
	}
	auto Tsort2 = Clock::now();
	cout<<"Tempo Rotinas Sort:"<<chrono::duration_cast<chrono::nanoseconds>(Tsort2 - Tsort1).count()/1000000000.0<<endl;

	vector<int> respostas;
	
	int valores_array[] = {1,3,5,10,20};																				//Vetor para rodar os valores especificados de K
	float acert;
	for(int h = 0; h < 5; h++)
	{
		auto Tknn1 = Clock::now();
		cout<<" "<<fflush;
		respostas = KNN(distancia,copia_dist,matriz_treino,valores_array[h]);																//Executa o KNN classificando os valores de testes
		auto Tknn2 = Clock::now();
		cout<<"Tempo Rotinas Knn "<<valores_array[h]<<" : "<<chrono::duration_cast<chrono::nanoseconds>(Tknn2 - Tknn1).count()<<endl;
		acert = acertividade(matriz_teste, respostas);																		//Função que calcula a taxa de acerto do algoritmo DTW + KNN
 		cout<<"Acertividade:"<<acert<<"%"<<endl<<endl;
	}
	
																											
 												

	return 0;
}

vector<vector<float> > DTW(vector<vector<float> >& mtreino ,vector<vector<float> >& mteste)
 {
	vector<vector<float> > contas(mteste.size());												//Cria uma matriz para retornar os resultados das comparações do DTW
	
	double aux;				 																	//Repassa os valores de um elemento para a matriz de respostas
	for(int k = 0; k < mteste.size();k++)														//Cria a matriz de tamanhom teste.size por mtreino.size,ou seja a quantia de linhas de teste e de treino formam o tamanho da matriz de resposta
	{
		contas[k].resize(mtreino.size());
	}       
	
	int i,j;																					//Auxiliares para o for
	for(i = 0;i < mteste.size();i++)															//For que percorre todas as linhas do arquivo de teste
	{
		for(j = 0;j < mtreino.size();j++)														//For que percorre todas as linhas do arquivo de treino
		{
			vector<vector<float> > mconta(mteste[i].size()-1);									//Cria a matriz para realizar os cálculos do DTW, de tamanho formado pelas colunas das matrizes de teste e de treino
			for(int a = 0;a < mteste[i].size()-1;a++)
			{
				mconta[a].resize(mtreino[j].size()-1);
			}
			
			for(int l = 0;l < mteste[i].size()-1;l++)											//Inicia o processo do cálculo do DTW, colocando infinito em todos os elementos iniciais da matriz
			{
				mconta[l][0] = numeric_limits<double>::infinity();
			}
			
			for(int m = 0;m < mtreino[j].size()-1;m++)											//Coloca valores infinitos como distancias laterais para calculo do DTW
			{
				mconta[0][m] = numeric_limits<double>::infinity();
			}
			
			mconta[0][0] = 0;																	//Coloca o valor 0 como primeiro membro da matriz, para dar inicio ao processo de cálculo do DTW
			
			for(int l = 1;l < mteste[i].size()-1;l++)											//Preenche a matriz de "colunas 1 e 2", utilizando a lógica de cálculo de distância para o DTW 
			{
				for(int m = 1;m < mtreino[j].size()-1;m++)
				{
					aux = Calc_Dist(mteste[i][l],mtreino[j][m]);								//Calcula a distância entre o elemento do vetor de teste e os elemntos de treino, para encontrar o menor valor
					float valor = min(mconta[l-1][m],min(mconta[l][m-1],mconta[l-1][m-1]));
					mconta[l][m] = aux + valor;
				}
			}
			int lin,col;																	
			lin = mconta.size()-1;																// Por fim coloca o ultimo valor da matriz de distância na matriz de resposta, este valor reprezenta a comparação entre as duas séries de posições
			col = mtreino[j].size()-2;
			contas[i][j] = mconta[lin][col];
		}
	}
	return contas;
 }

double Calc_Dist(float x, float y)																		//Fução que calcula a distância entre dois elementos fornecidos
{
	double z = abs(x-y);
	return z;
}

float acertividade(vector<vector<float> > mrotulos, vector<int> respostas ){							//Função para o cálculo da taxa de acertos do programa

		int cont = 0;
		int i;

		for(i=0; i<960; i++){
			if(mrotulos[i][0]==respostas[i]){															//Compara a classificação dos vetores de treino com os vetores obtidos através da classificação das séries
				cont++;
			}
		}
		float acert = cont*100.0/960.0;																	//Transforma a taxa de acertos em porcentagem
		return acert;
}

vector<int> KNN(vector<vector<float> > resultados ,vector<vector<float> > comparado,vector<vector<float> > treino,int k)	//Função que classifica as séries temporais de acordo com a distância recebida do DTW
{
	vector<int> votos;																					//Vetor que retorna os votos compilados pelo KNN
	
	for(int j = 0;j < resultados.size();j++)															//Loop que engloba todos os valores da coluna de resultados
	{
		int voto_atual;
		int desempate;																					//Variavel que no caso de empate guardará qual valor deve ser adotado
		int vetor_votos[12];
		for(int o = 0;o < 12;o++)
		{
			vetor_votos[o] = 0;
		}
		
		for(int l = 0;l < k;l++)																		//For que acumula os melhores classificados dependo do numero K especificado
		{
			float aux = resultados[j][l];																//Guarda o menor valor atual no auxiliar para encontrar qual indice pertence essa informação
			for(int m = 0;m < comparado[j].size();m++)
			{
				if(aux == comparado[j][m]) 																//busca qual rótulo a linha em questão possui;
				{
					int valor = treino[m][0];
					vetor_votos[valor-1]++;
					if(l == 0)																			//No caso de um empate o valor adotado será o menor valor encontrado pela função DTW
					{
						desempate = valor;
					}
					break;
				
				}
			}
		}
		
		voto_atual = vetor_votos[0];																	//Após compilar os votos, procura-se a maior quantia de votos
		int indice[12],numero_auxiliar = 0;
		for(int n = 1; n < 12;n++)
		{
			if(vetor_votos[n]>voto_atual)
			{
				numero_auxiliar = 0;
				voto_atual = vetor_votos[n];															
				indice[numero_auxiliar] = n + 1;														//Salva o valor do indice encontrado atualmente para compara-lo como resultado, atualiza esse valor caso encontre um numero de votos maior
			}
			
			else if(vetor_votos[n] == voto_atual && voto_atual!=0)										//Quando encontrar um valor igual de votos(excluindo o 0), salva o empate em uma varialvel para uso futuro
			{
				numero_auxiliar++;
				indice[numero_auxiliar] = n + 1;     //No caso de empate um algoritmo determina o vencedor
			}
		}
		if(numero_auxiliar!=0)																			//Se o numero auxiliar for diferente de 0, houve um empate, portanto o valor de desempate é adicionado
		{
			votos.push_back(desempate);
		}
		else 
		{
			votos.push_back(indice[0]);																	//Sem acontecer um empate o maior numero de votos define a classificação
		}
	}
	return votos;
}	//ordenar e comparar os mais proximos da serie
